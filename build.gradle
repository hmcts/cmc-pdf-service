plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'org.springframework.boot' version '2.1.2.RELEASE'
  id 'org.owasp.dependencycheck' version '4.0.2'
  id 'com.github.ben-manes.versions' version '0.20.0'
  id 'org.sonarqube' version '2.7'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

allprojects {
  apply plugin: 'checkstyle'

  sourceSets {
    functionalTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/functionalTest/java')
      }
      resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/integrationTest/java')
      }
      resources.srcDir file('src/integrationTest/resources')
    }

    smokeTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/smokeTest/java')
      }
      resources.srcDir file('src/smokeTest/resources')
    }
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
  }

  task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
  }

  task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

  }

  task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
  }

  checkstyle {
    maxWarnings = 0
    toolVersion = '8.16'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
  }

  jacocoTestReport {
    executionData(test, integration)
    reports {
      xml.enabled = true
      csv.enabled = false
      xml.setDestination(file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
    }
  }

  dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
          selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
        }
        if (rejected) {
          selection.reject('Release candidate')
        }
      }
    }
  }

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }

  repositories {
    jcenter()
    maven {
      url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
  }

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.

  test {
    useJUnitPlatform()
    failFast = true
  }

  def flyingSaucerVersion = '9.1.16'

  dependencyManagement {
    imports {
      mavenBom "org.xhtmlrenderer:flying-saucer-pdf:${flyingSaucerVersion}"
    }
  }

  ext {
    junit = '5.3.2'
    reformLogging = '4.0.1'
    springBoot = '2.1.2.RELEASE'
    springfoxSwagger = '2.9.2'
    flyingSaucer = flyingSaucerVersion
    openPdf = dependencyManagement.importedProperties['openpdf.version']
  }

}

project.tasks['sonarqube'].dependsOn test, integration

pmd {
  toolVersion = "6.9.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: spring-boot-template"
    property "sonar.projectKey", "uk.gov.hmcts.reform:spring-boot-template"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"

  }
}

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: springfoxSwagger

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: reformLogging

  compile group: 'uk.gov.hmcts.reform', name: 'reform-api-standards', version: '0.4.0'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile group: 'org.pdfbox', name: 'com.springsource.org.pdfbox', version: '0.7.3'


  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath


  functionalTestCompile sourceSets.main.runtimeClasspath

  smokeTestCompile sourceSets.main.runtimeClasspath

  compile project(':pdf-generator')
  integrationTestCompile project(':pdf-generator')
}


mainClassName = 'uk.gov.hmcts.reform.pdf.service.PDFServiceApplication'

bootJar {
  archiveName = 'pdf-service.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
