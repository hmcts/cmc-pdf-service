plugins {
  id 'application'
  id 'checkstyle'
  id 'io.spring.dependency-management' version '1.0.3.RELEASE'
  id 'org.springframework.boot' version '1.5.7.RELEASE'
  id 'org.owasp.dependencycheck' version '1.4.5.1'
  id 'com.github.ben-manes.versions' version '0.15.0'
  id 'org.sonarqube' version '2.5'
  id 'jacoco'
  id 'pmd'
}

def springBootVersion = '1.5.7.RELEASE'

allprojects {

  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'com.github.ben-manes.versions'

  group 'uk.gov.hmcts.reform'
  version '1.0.2'

  checkstyle.toolVersion = '7.2'
  checkstyle.configFile = new File(rootDir, "checkstyle.xml")

  // make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
  tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
      reports.all { report ->
        def outputFile = report.destination
        if (outputFile.exists() && outputFile.text.contains("<error ")) {
          throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
        }
      }
    }
  }

  // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
  }

  sourceCompatibility = 1.8
  compileJava {
    options.compilerArgs << '-parameters'
  }

  repositories {
    jcenter()
  }

  sourceSets {
    integrationTest {
      java {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        srcDir('src/integrationTest/java')
      }
      resources {
        srcDir('src/integrationTests/resources')
      }
    }
  }

  dependencies {
    integrationTestCompile(sourceSets.test.output)
    integrationTestCompile(project(':pdf-generator').sourceSets.main.output)
  }

  task apiTest(type: Test) {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
  }

  task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)

    useJUnit {
      includeCategories 'uk.gov.hmcts.reform.pdf.service.integration.SmokeTest'
    }
  }

  task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
  }

  compileIntegrationTestJava {
    options.compilerArgs << '-Xlint:deprecation'
  }

  dependencies {
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
    testCompile group: 'org.pdfbox', name: 'com.springsource.org.pdfbox', version: '0.7.3'
  }

}

apply plugin: 'application'

mainClassName = 'uk.gov.hmcts.reform.pdf.service.PDFServiceApplication'

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
  }
}

ext {
  versions = [
    springBoot      : springBootVersion,
    spring          : '4.3.10.RELEASE',
    jackson         : dependencyManagement.importedProperties['jackson.version'],
    springfoxSwagger: '2.7.0',
    reformJavaLogging: '1.6.1'
  ]
}

configurations {
  integrationTestCompile.extendsFrom(testCompile)
  integrationTestRuntime.extendsFrom(testRuntime)
}

dependencies {
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: project.versions.jackson
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: project.versions.jackson
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: project.versions.jackson
  compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: project.versions.jackson

  compile group: 'io.springfox', name: 'springfox-swagger2', version: project.versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: project.versions.springfoxSwagger

  compile group: 'org.springframework', name: 'spring-context-support', version: project.versions.spring

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: project.versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: project.versions.springBoot

  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '1.4.0.RELEASE'

  compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: project.versions.reformJavaLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: project.versions.reformJavaLogging
  compile group: 'uk.gov.hmcts.reform', name: 'reform-api-standards', version: '0.2.2'
  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '0.4.2'

  compile project(':pdf-generator')
}

jacocoTestReport {
  executionData(test, apiTest)

  reports {
    xml {
      enabled true
    }

    html {
      enabled true
    }
  }
}

project.tasks['sonarqube'].dependsOn test, apiTest
project.tasks['check'].dependsOn apiTest
sonarqube {
  properties {
    property "sonar.projectName", "Platform :: PDF Service"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/apiTest.exec"
  }
}

pmd {
  toolVersion = "5.8.1"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("ruleset.xml")
}

jar {
  archiveName = 'pdf-service.jar'
  manifest {
    attributes 'Implementation-Title': project.name,
      'Implementation-Version': project.version
  }
}

bootRepackage {
  classifier 'all'
}

task printVersion {
  doLast {
    print project.version
  }
}

def debug = System.getProperty("debug")
run {
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}
